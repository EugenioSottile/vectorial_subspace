import random
from pprint import pprint
import numpy as np
from sklearn.metrics.pairwise import cosine_similarity

from vectorial_subspace import VectorialSubspace


N = 768
#tensor_target = np.random.randn(N)

#tensor_target = np.random.randn(N)
"""tensor_target = [
    0.11, -1.43, -1.20, 0.09,
    -0.23, -1.37, -0.20, 0.06,
    0.11, -2.33, 0.33, 0.10,
    -0.17, -0.22, 0.47, 0.01,
    0.12, -0.23, 1.57, -0.02,
    -0.07, 1.12, -0.15, -0.05,
    0.04, 1.66, 0.14, -0.98,
    0.04, 1.74, 0.18, 0.83,
    0.04, 1.05, -1.15, -0.02
]"""
tensor_target = [
    0.1027, -1.7974, 0.2170, 0.1519,
    -0.1194, -2.3348, -1.0825, 0.0100,
    0.1068, -1.6865, -1.9371, -0.1648,
    -0.0451, -3.7241, -1.2843, 0.0652,
    0.0679, -4.1323, -2.2837, -0.0546,
    -0.0025, -4.5857, -0.1976, 0.2824,
    0.0606, -5.6592, -0.3550, 0.3247,
    -0.0451, -4.0583, 1.0939, 0.4328,
    0.0679, -4.7237, 1.9365, 0.5964,
    -0.1194, -2.6701, 1.2975, 0.3686,
    0.1068, -2.2654, 2.2979, 0.4923,
    -0.1814, -0.4012, 0.4833, 0.0939,
    -0.1814, 0.4006, -0.4821, -0.1005,
    0.1027, 1.7971, -0.2167, -0.1551,
    -0.1194, 2.6698, -1.2966, -0.3759,
    0.1068, 2.2652, -2.2968, -0.5016,
    -0.0451, 4.0583, -1.0932, -0.4373,
    0.0679, 4.7234, -1.9343, -0.6092,
    -0.0025, 4.5859, 0.1969, -0.2761,
    0.0606, 5.6595, 0.3544, -0.3176,
    -0.0451, 3.7245, 1.2828, -0.0556,
    0.0679, 4.1325, 2.2822, 0.0642,
    -0.1194, 2.3353, 1.0812, 0.0100,
    0.1068, 1.6868, 1.9365, 0.1681
]
N = len(tensor_target)
"""for i in range(N):
    tensor_target[i] *= 10"""
#tensor_target = tensor_target * 10
#tensor_target = np.array(tensor_target)
tensor_target = [-5.2916e-01,  5.2557e-01, -3.1148e-01, -3.1957e-01,  2.3406e-01,
         3.5020e-01,  5.5986e-01,  9.4006e-01,  3.9250e-02,  9.1121e-01,
        -8.1828e-01, -9.0678e-02,  4.8862e-01,  5.6960e-01,  1.6983e-01,
         3.2210e-01,  6.8283e-02, -5.9306e-01,  1.3180e+00, -4.1111e-01,
        -4.1280e-01,  2.6895e-01,  7.6843e-01,  5.8287e-01,  1.4349e-01,
        -4.0206e-01,  1.0052e+00, -5.6773e-01,  5.5577e-01,  1.2317e-01,
         5.3001e-01,  7.6586e-02, -6.0068e-01,  1.5360e-01, -8.1330e-01,
        -4.6578e-01, -1.3687e-01,  7.7485e-02, -4.4419e-01, -9.2017e-02,
        -5.5761e-01,  3.8351e-01,  3.2670e-01,  2.3555e-02,  7.4533e-02,
         1.0587e-01, -8.7871e-01, -2.9995e-01,  6.8349e-01,  7.5745e-01,
         2.5404e-02,  1.0062e+00, -5.9049e-01,  2.1235e-01,  4.6769e-01,
        -2.6209e-01,  1.1254e+00,  3.0742e-01, -5.0333e-01, -1.9550e+00,
         8.3483e-01,  6.2674e-01,  9.4390e-02, -2.3290e-03,  1.2979e-01,
         1.3006e+00,  6.8133e-01, -9.4735e-03, -3.3875e-01,  2.7540e-01,
        -5.5076e-01, -1.8893e-01,  3.7352e-01, -1.3537e+00, -2.5282e-01,
         1.5240e-01, -2.0625e-01,  1.2618e-01, -3.0509e-02, -1.0297e+00,
         4.2784e-02,  2.0000e-01,  9.4120e-01, -5.7678e-01, -1.2560e-01,
        -9.2969e-01,  1.4390e-01, -1.5304e-01,  1.4427e-01, -7.6575e-01,
         6.6281e-01, -4.7649e-01,  1.0070e+00, -2.0061e-01, -8.8686e-01,
        -2.7236e-01,  2.1171e-01,  4.3520e-01, -1.7354e-01,  8.4911e-02,
        -7.8601e-01, -2.0848e+00,  4.9164e-01, -8.6117e-01, -1.2705e-01,
         7.5806e-01, -8.4150e-01,  2.9138e-02,  5.9628e-02,  3.9752e-01,
         8.1632e-02,  9.4851e-01,  5.9852e-02,  7.2060e-01, -3.1716e-01,
         2.7323e-01,  4.5059e-01, -4.1298e-01, -7.7323e-01,  1.1297e-01,
        -6.9848e-01, -8.3463e-01, -1.7889e-01,  1.5618e-01,  1.3256e+00,
         8.3591e-03,  2.0423e-01,  9.6878e-01, -6.4737e-02, -1.4384e-01,
         9.1892e-02, -1.7608e-01,  5.2274e-01,  3.6381e-01,  1.1853e+00,
        -2.7004e-01,  9.1993e-01,  5.6227e-01, -9.4914e-01, -7.7276e-01,
         1.0493e-01, -6.1800e-01,  2.2758e-01,  8.9029e-02, -1.3363e+00,
         3.4375e-01,  2.6182e-01,  8.4888e-01, -4.5255e-03, -1.9635e-01,
        -4.7878e-01,  8.5463e-01,  3.8573e-01, -1.6796e+00, -4.0188e-01,
         1.2365e+00, -5.1377e-01, -5.2652e-01, -3.0521e-01, -1.2441e-01,
         1.2692e+00,  4.3576e-01, -4.5459e-01, -6.2266e-01, -2.0395e-02,
        -2.4083e-01,  4.0636e-01,  6.6300e-01, -1.1865e+00,  2.8266e-01,
        -1.0404e+00,  2.6842e-02, -1.1211e+00,  6.0079e-01, -6.6643e-02,
        -1.0071e+00,  1.0658e+00, -6.5199e-01,  6.6602e-01,  5.0333e-02,
        -8.5855e-01, -1.7571e-01, -9.2662e-01,  4.8962e-02, -3.7364e-01,
         8.8069e-01, -2.5660e-01, -6.6346e-02, -1.4286e+00, -9.6667e-02,
        -4.6089e-01, -9.9156e-02,  3.6325e-01, -2.3156e-02,  1.2475e-01,
         8.0567e-01, -2.7193e-01, -1.7038e+00,  1.7621e-01, -6.8529e-01,
        -3.0553e-01,  5.7471e-01, -4.1328e-01, -1.1170e-01,  5.6199e-01,
        -5.8115e-01,  6.2229e-01, -1.5037e+00,  7.6353e-01,  4.7368e-01,
        -8.6887e-01, -4.1370e-01, -1.6391e+00, -8.3388e-02,  2.4112e-01,
        -6.2877e-01, -8.2031e-01, -2.2625e-01, -2.9164e-01, -1.0384e-01,
        -1.8783e-01, -3.7316e-01,  1.6071e-01,  1.7049e-01,  1.2715e+00,
         2.0225e-01,  3.3153e-01, -3.6526e-01, -5.3528e-01,  1.3126e-01,
         1.0507e+00,  5.3502e-02, -4.7177e-01, -8.4287e-01, -1.7120e-01,
        -5.3207e-01,  4.6692e-01,  1.4474e-01, -5.6069e-01,  4.4515e-01,
        -5.9306e-01, -2.0942e-01,  3.6560e-01,  2.7476e-01, -2.5902e-01,
         4.7664e-01, -3.8589e-02,  7.5152e-01,  6.1483e-01, -6.7481e-01,
        -2.6493e-01,  6.2797e-01,  5.3241e-02,  4.2475e-01, -5.6854e-01,
         1.9106e-02,  6.2351e-01, -1.0917e-01, -1.0410e+00,  1.5897e-02,
        -4.2070e-01,  5.7227e-01, -3.4643e-01, -3.4056e-01, -6.1351e-01,
        -1.2303e+00,  9.6703e-01, -1.1086e-01,  2.2663e-01,  1.7752e-01,
        -1.0350e+00, -2.1457e-01, -4.5022e-01,  1.0443e+00, -1.1663e-03,
        -6.6108e-01, -5.9812e-01, -2.8519e-01,  5.3047e-01,  8.2891e-01,
         5.3559e-01, -1.5792e+00,  9.1837e-01,  3.6982e-01,  1.0429e+00,
        -6.3194e-01, -9.1834e-01, -7.3004e-01, -8.5123e-01,  1.4863e-01,
         7.7572e-02, -1.4641e-01,  8.1631e-01,  5.5200e-01,  4.1825e-01,
        -5.5355e-01,  3.4355e-01,  9.1400e-01,  8.9944e-01, -9.3828e-01,
         1.8349e-01, -6.4219e-01,  1.5347e-01,  6.0803e-01,  2.1231e-01,
         9.2133e-02,  8.4534e-01,  9.3565e-01,  1.3082e+00, -1.3311e-01,
        -2.9920e-01,  6.0854e-01,  1.8696e-01, -8.4655e-01, -6.7381e-01,
         6.9740e-02, -1.9490e-01, -5.8718e-01, -3.3775e-01, -1.9223e-01,
         4.2407e-01, -2.0042e-01, -1.4018e-01, -2.4526e-01,  3.1654e-01,
        -2.1919e-01, -1.0287e-01, -3.8105e-01, -6.2652e-01, -2.9093e-01,
        -5.7651e-02, -2.9269e-01, -7.6202e-03, -2.0330e-01, -2.1227e-01,
        -5.5372e-01,  5.3905e-01,  7.4589e-02,  7.1577e-01,  4.0730e-01,
        -8.7876e-01, -3.3214e-01, -5.6841e-02,  4.3454e-01,  2.2721e-01,
        -4.5762e-01, -1.4473e-01,  1.1978e+00, -3.2083e-01,  1.7136e+00,
         4.9777e-01, -4.2288e-01,  7.0989e-02, -4.1337e-01, -1.2206e+00,
        -6.3736e-01,  6.6973e-01,  1.0873e+00,  8.3444e-01, -1.1044e+00,
         8.6539e-01, -1.2270e-01,  9.8585e-01,  7.2417e-01,  6.1121e-01,
         1.7252e-01,  3.0015e-01,  6.5729e-01,  1.9719e-01,  1.3855e-01,
        -3.3359e-01, -6.4411e-01, -7.2679e-01,  3.8488e-01, -5.9573e-02,
        -4.0014e-01, -8.3905e-01,  8.6630e-01,  9.0024e-01, -1.9022e-02,
        -7.3874e-02, -8.2868e-01,  1.2122e-02,  1.1205e-01,  4.3118e-01,
        -5.9784e-01, -7.1215e-01, -1.2083e+00,  1.0711e+00, -6.1017e-01,
         5.2644e-01, -7.6412e-02, -1.4249e-01, -1.5893e+00, -3.9722e-01,
         7.9788e-02, -2.3357e-01,  9.7157e-02, -1.1420e-01,  2.7796e-01,
         9.5519e-01,  3.9224e-01, -4.7063e-01, -1.0748e-01, -5.0453e-01,
        -1.9943e+00,  5.7503e-01, -1.2257e-01, -1.9010e-01,  5.2454e-01,
         3.0268e-01,  2.9353e-01, -1.0176e+00,  2.3303e-02, -6.8030e-01,
        -2.8361e-01, -8.1982e-01,  1.3042e+00,  8.5843e-02,  3.1293e-01,
         1.1608e+00,  1.7400e+00,  1.6895e-01,  1.4016e-01,  8.3208e-01,
         8.3263e-01,  1.0620e+00, -5.0914e-01, -2.4075e-01, -2.9368e-01,
        -5.0895e-01, -3.8456e-01, -4.5710e-01,  4.9309e-01, -5.1535e-01,
        -8.0795e-01,  3.6572e-01,  4.2686e-01, -7.9385e-01,  4.7624e-01,
        -7.7470e-01,  7.9955e-01,  6.0644e-01, -9.0540e-01, -1.2810e+00,
        -1.2433e-01, -9.0497e-01, -3.8456e-01, -9.9725e-01,  5.9126e-01,
         3.6217e-01,  4.7746e-01, -5.4455e-02,  3.1899e-01, -1.2608e+01,
         6.4797e-01, -8.6344e-01,  5.4672e-01,  3.8067e-01,  6.6454e-01,
        -2.1196e-01, -5.5449e-02,  5.1619e-01, -1.9001e-01, -5.9811e-01,
         1.6238e+00,  1.8775e-01, -8.5317e-01,  6.8495e-02, -1.0218e+00,
        -5.6871e-01, -1.3017e-01,  2.3275e-01, -9.7344e-01,  1.0138e-01,
        -1.6340e+00,  2.1163e-01,  1.0673e-01,  6.5763e-01, -6.1528e-01,
         8.8254e-02, -8.1363e-02,  1.9276e-01,  1.6479e-01,  8.0742e-01,
         5.6410e-01,  1.3378e+00, -1.2511e+00,  3.6446e-01,  5.8438e-02,
        -2.1075e-01, -1.6352e-01,  1.1336e+00,  1.8183e-02,  7.2147e-01,
        -3.1450e-01, -1.2748e-01, -1.5119e+00, -5.5049e-01,  8.2306e-01,
         9.6839e-02,  1.2750e-01, -9.5933e-02, -9.7999e-01, -4.9133e-01,
         6.9144e-01,  4.6956e-01,  6.1037e-01,  8.1263e-01, -3.9454e-02,
        -1.0563e+00,  1.9408e-01, -1.3867e+00, -9.0060e-01,  5.0289e-01,
        -3.5563e-02, -1.3292e+00,  5.9552e-01, -4.6344e-01, -3.2976e-02,
         2.2858e-01,  4.7125e-01, -3.5779e-01, -2.8223e-01,  1.4235e-01,
         9.5017e-01,  4.7069e-01,  1.9621e-01,  8.1918e-01,  2.3715e-01,
         8.8014e-01, -1.3139e+00,  2.2592e-01, -1.6251e-01,  6.4488e-02,
        -5.7169e-01, -1.0345e+00, -9.5120e-01, -6.8623e-01, -3.1130e-01,
        -7.1672e-01, -1.2644e+00,  4.3078e-01,  1.7628e-01,  3.5185e-01,
        -7.1979e-01, -6.2182e-02, -1.1353e-01,  5.4325e-01, -4.6992e-01,
        -1.4853e-01,  6.1725e-01, -1.9089e-01,  4.0734e-01,  3.0013e-02,
         4.0350e-01, -1.1247e+00, -8.1914e-01,  1.4921e+00, -1.6288e-01,
        -5.5730e-01, -8.0569e-02,  7.3294e-02,  5.1749e-01, -3.6231e-01,
        -3.1461e-01,  1.0784e+00,  9.8034e-01, -8.5035e-01,  1.3212e+00,
         3.6323e-01, -1.2742e-01,  3.8635e-01,  8.4799e-01,  4.3871e-01,
        -1.0449e+00,  1.2409e+00,  5.7697e-01, -1.9478e-01,  4.0356e-01,
        -4.2267e-02,  6.9433e-01, -5.0111e-01, -9.2690e-01,  5.6615e-01,
         2.3697e-01,  1.0381e-01,  3.2566e-01, -2.0713e-01, -6.4728e-01,
        -1.0484e-02,  7.8253e-01, -1.1323e-01,  1.1181e+00, -1.2643e-01,
        -1.2898e+00, -3.3988e-01,  1.1446e+00, -6.7133e-01,  4.9643e-02,
        -3.4454e-01,  7.7900e-02,  5.6637e-01, -7.6233e-01,  6.0262e-01,
        -3.7957e-01,  1.6137e-01,  5.0695e-01,  2.4343e-01, -1.7445e-01,
         7.9982e-01,  4.7856e-01, -1.3775e+00, -8.9780e-02,  2.0990e-01,
         1.1158e-01, -6.4695e-01,  2.1580e-01,  5.4667e-01,  1.1650e+00,
         2.6312e-01,  7.1401e-01, -1.2045e-02,  2.6743e-01, -2.9686e-01,
        -7.6141e-01,  4.5155e-02,  4.3442e-03,  2.1253e-01, -1.1242e+00,
         4.0643e-01,  6.4382e-01, -1.9908e+00, -3.5768e-01, -6.4174e-01,
         2.4744e-01,  9.1502e-01, -5.6837e-01, -1.1529e+00, -3.3888e-01,
         1.7633e-01,  6.6884e-01, -1.6633e-01,  2.2764e-01, -9.9037e-01,
        -7.9739e-01, -8.4637e-01,  7.2069e-01,  1.0762e+00, -8.5047e-01,
         4.7163e-01,  1.3500e+00, -8.4332e-01, -1.8533e-01, -3.0550e-01,
         3.2158e-01,  3.7095e-01,  2.5754e-01,  3.3647e-02, -1.8073e-01,
        -7.7756e-01, -4.1843e-01,  3.1378e-01,  8.5418e-01, -2.0024e-01,
        -7.4464e-03,  7.2346e-01,  2.2114e-01, -8.1062e-01,  2.4315e-01,
         8.3201e-01,  1.1803e+00,  8.4639e-01,  3.5972e-01,  4.9000e-01,
         4.1359e-01, -3.8750e-01,  4.0853e-02,  9.4758e-02,  1.3086e+00,
         4.3045e-01, -8.2517e-01,  1.0326e+00,  1.2385e-01, -4.7254e-01,
         1.4168e-01, -4.2713e-01, -3.9121e-01,  8.2183e-01,  2.3290e-01,
         2.5997e-02,  1.6108e+00, -8.2159e-01,  1.8312e-01,  2.4685e-01,
         2.3071e-01,  9.4239e-01,  1.3352e+00, -4.6221e-01, -5.2978e-01,
        -3.7566e-01, -8.0534e-01, -5.7100e-01,  4.1418e-01, -3.7024e-01,
        -3.9642e-01,  1.1979e-01, -8.3460e-02,  8.6886e-01,  2.3967e-02,
         5.4312e-01, -3.8536e-01,  6.9477e-01,  1.2871e+00,  6.9196e-01,
         2.5875e-01,  2.0662e-01,  1.8384e-01, -5.5731e-01,  6.7308e-01,
        -4.0852e-01, -3.7122e-02,  1.3961e-01, -9.9788e-01, -7.5469e-03,
        -4.1512e-01, -3.2953e-01,  2.5559e-01, -8.2778e-03,  8.0422e-02,
        -1.1072e+00,  2.4217e-02, -8.3838e-01,  6.5193e-01,  1.8911e-01,
        -1.0530e-01, -1.0821e+00,  9.2057e-01,  2.3492e-01, -2.1578e-01,
         3.9333e-01,  3.0615e-01,  8.2449e-01,  1.3247e-01,  1.0301e+00,
        -2.8801e-01, -4.5940e-01, -4.3561e-01, -1.6005e-01, -2.7832e-01,
         1.2006e+00, -4.0455e-01, -2.5742e-01,  3.8805e-01,  5.2478e-01,
         8.6174e-02,  6.5332e-02, -2.6796e-02,  1.2352e+00,  5.4794e-01,
         3.7763e-01,  1.0605e+00,  5.4789e-02, -2.2199e-01,  2.9397e-01,
         9.4859e-01,  7.8026e-01,  8.0752e-01]

similarity_value = 0.95
minimization_step = (1 - similarity_value) / 2
#minimization_step = (1 - similarity_value) / 10
window_size = 16
step_window = int(window_size / 2)
#step_window = 6

constraints = []
for i in range(0, N, 4):
    constraints.append(i)

vectorial_subspace = VectorialSubspace(
    metric="cosine",
    threshold=similarity_value,
    minimization_step=minimization_step,
    window_size=window_size,
    window_step=step_window,
    method="COBYLA",
    intervals_reducing_type="union",
    fixed_constraints=tuple(constraints),
    verbose=1
)

vectorial_subspace.optimize(tensor_target)
pprint(vectorial_subspace.intervals)
intervals = vectorial_subspace.intervals

flag = True
tensor_target = np.array([tensor_target, ])
num_error = 0
num_iter = 0
min_value = 100
max_value = 0
print()
for _ in range(10000):
    num_iter += 1
    random_tensor = []
    for ranges in intervals:
        range_ = random.choice(ranges)
        # random_value_range = random.uniform(range_[0], range_[1])
        mode = (range_[0] * 1 + range_[1] * 1) / 2
        random_value_range = random.triangular(range_[0], range_[1], mode=mode)
        random_tensor.append(round(random_value_range, 2))
    random_tensor = np.array([random_tensor, ])
    sim_random = cosine_similarity(tensor_target, random_tensor)[0][0]

    if sim_random < min_value:
        min_value = sim_random
    if sim_random > max_value:
        max_value = sim_random
    if round(sim_random, 2) < similarity_value:
        num_error += 1

    #print(random_tensor, sim_random)
    percentage_error = (num_error * 100) / num_iter
    print(
        f"\rNumbers generated vectors {num_iter}\t"
        f"Error percentage {round(percentage_error, 2)}%\t"
        f"Min value: {round(min_value, 2)}\t"
        f"Max value: {round(max_value, 2)}",
        end=""
    )

"""for i in range(N):
    random_tensor[0][i] /= 10"""
"""print()
print(sim_random)
for i in range(0, N, 4):
    bfac_index = i
    x_index = i + 1
    y_index = i + 2
    z_index = i + 3
    print(random_tensor[0][bfac_index], random_tensor[0][x_index], random_tensor[0][y_index], random_tensor[0][z_index])"""
